#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('app:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

let fs = require("../api/sdk/fs.js")


global.io = require('socket.io')(server);

io.configure(function () {
  io.set("transports", ["xhr-polling"]);
  io.set("polling duration", 10);
});

io.on('connection', function (socket) {

  socket.on('connection', function (data) {
      console.log(data);
      io.emit("message", " connected");
  })

  socket.on('add_point', function (data) {
    fs.collection("points")
      .add({
          // "name": data.name,
          // "point": data.point
          // "First_name": data.First_name,
          // "Last_name": data.Last_name,
          // "Asal_Sekolah": data.Asal_Sekolah,
          // "Umur": data.Umur,
          // "Tinggi_Badan": data.Tinggi_Badan,
          // "Berat_Badan": data.Berat_Badan,
          // "point": data.point
      }).then((s)=>{

      });
  })

  socket.on('add_point_wemos', function (data) {
    console.log("add_point_wemos", data);
    fs.collection("points")
      .add({
          "name": data.name,
          "point": data.point
      }).then((s)=>{

      })
  })

  socket.on('disconnect', function (data) {
      console.log(data);
  })

})



fs.collection('points').onSnapshot(snap => {
  snap.docChanges().forEach(dt => {

      if (dt.type == "added") {

        io.emit("add_point", dt.doc.data());

      }

  });
});



/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
